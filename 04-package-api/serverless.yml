service: package-api

custom:
  stage: ${opt:stage, "dev"}
  sstApp: ${self:custom.stage}-eco-server
  serverless-offline:
    httpPort: 4000
    lambdaPort: 4002
  customDomain:
    domainName: package.eco-elm.org
    createRoute53Record: true
    endpointType: 'regional'
    apiType: rest
    autoDomain: false
    stage: ${self:custom.stage}

provider:
  name: aws
  runtime: nodejs12.x
  profile: default
  region: eu-west-2
  timeout: 120
  environment:
    stage: ${self:custom.stage}
    buildStatusTable: !ImportValue ${self:custom.sstApp}-BuildStatusTableName
    buildStatusByFQPackageIndex: !ImportValue ${self:custom.sstApp}-BuildStatusByFQPackageIndex
    markersTable: !ImportValue ${self:custom.sstApp}-MarkersTableName
    rootSiteImportsTable: !ImportValue ${self:custom.sstApp}-RootSiteImportsTableName
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
      Resource:
        - !ImportValue ${self:custom.sstApp}-BuildStatusTableArn
        - { "Fn::Join" : ["", [{"Fn::ImportValue": "${self:custom.sstApp}-BuildStatusTableArn"}, "/index/*" ] ] }
        - !ImportValue ${self:custom.sstApp}-MarkersTableArn
        - !ImportValue ${self:custom.sstApp}-RootSiteImportsTableArn

plugins:
  - serverless-webpack
  - serverless-offline
  - serverless-dotenv-plugin
  - serverless-domain-manager

functions:
  packages:
    handler: src/Packages/api.handler
    events:
      - http:
          integration: lambda-proxy
          path: /{proxy+}
          method: ANY
