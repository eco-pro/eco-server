service: package-api

custom:
  stage: ${opt:stage, "dev"}
  sstApp: ${self:custom.stage}-eco-server

provider:
  name: aws
  runtime: nodejs12.x
  profile: default
  region: eu-west-2
  timeout: 120
  environment:
    stage: ${self:custom.stage}
    # buildStatusTable: !ImportValue ${self:custom.sstApp}-BuildStatusTableName
    # buildStatusByFQPackageIndex: !ImportValue ${self:custom.sstApp}-BuildStatusByFQPackageIndex
    # markersTable: !ImportValue ${self:custom.sstApp}-MarkersTableName
    # rootSiteImportsTable: !ImportValue ${self:custom.sstApp}-RootSiteImportsTableName
    buildStatusTable: ${self:custom.stage}-BuildStatusTable
    buildStatusByFQPackageIndex: ${self:custom.stage}-BuildStatusByFQPackageIndex
    markersTable: ${self:custom.stage}-MarkersTableName
    rootSiteImportsTable: ${self:custom.stage}-RootSiteImportsTableName
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
      Resource:
        - !ImportValue ${self:custom.sstApp}-BuildStatusTableArn
        - { "Fn::Join" : ["", [{"Fn::ImportValue": "${self:custom.sstApp}-BuildStatusTableArn"}, "/index/*" ] ] }
        - !ImportValue ${self:custom.sstApp}-MarkersTableArn
        - !ImportValue ${self:custom.sstApp}-RootSiteImportsTableArn

plugins:
  - serverless-webpack
  - serverless-offline

functions:
  packages:
    handler: src/Packages/api.handler
    events:
      - http:
          integration: lambda-proxy
          path: /{proxy+}
          method: ANY
