service: build-api

plugins:
  - serverless-webpack
  - serverless-offline
  - ./serverless-cloudmap

custom:
  stage: ${opt:stage, "dev"}
  sstApp: ${self:custom.stage}-eco-server
  serverless-offline:
    httpPort: 3000
    lambdaPort: 3002
  cloudmap:
    services:
      - cfname: 'BuildApiService' # Cloudformation friendly name
        name: 'build-api-service' # Service name
        namespace: !ImportValue ${self:custom.sstApp}-ServiceNamespaceId
        instances:
          - cfname: 'BuildApi' # Cloudformation friendly name
            name: 'buildapi' # Individual, friendly function name
            arn: { "Fn::GetAtt" : [ BuildapiLambdaFunction, Arn ] } # Arn or reference to your individual serverless function
            url: { "Fn::Join" : ["", ["https://", { "Ref" : "ApiGatewayRestApi" }, ".execute-api.${self:provider.region}.amazonaws.com/${self:custom.stage}/" ] ]  }
            cname: { "Fn::Join" : ["", [ { "Ref" : "ApiGatewayRestApi" }, ".execute-api.${self:provider.region}.amazonaws.com" ] ]  }

provider:
  name: aws
  runtime: nodejs12.x
  profile: default
  region: eu-west-2
  timeout: 120
  # vpcEndpointIds:
  #   - !ImportValue ${self:custom.sstApp}-VpcEndpointId
  # endpointType: PRIVATE
  resourcePolicy:
    - Effect: Allow
      Principal: '*'
      Action:
        - execute-api:Invoke
      Resource:
        - execute-api:/*
  environment:
    stage: ${self:custom.stage}
    # buildStatusTable: !ImportValue ${self:custom.sstApp}-BuildStatusTableName
    # buildStatusByFQPackageIndex: !ImportValue ${self:custom.sstApp}-BuildStatusByFQPackageIndex
    # markersTable: !ImportValue ${self:custom.sstApp}-MarkersTableName
    # rootSiteImportsTable: !ImportValue ${self:custom.sstApp}-RootSiteImportsTableName
    buildStatusTable: ${self:custom.stage}-buildstatus
    buildStatusByFQPackageIndex: ${self:custom.stage}-buildstatus-byfqpackage
    markersTable: ${self:custom.stage}-markers
    rootSiteImportsTable: ${self:custom.stage}-rootsiteimports
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
        - dynamodb:BatchWriteItem
      Resource:
        - !ImportValue ${self:custom.sstApp}-BuildStatusTableArn
        - !ImportValue ${self:custom.sstApp}-MarkersTableArn
        - !ImportValue ${self:custom.sstApp}-RootSiteImportsTableArn

functions:
  buildapi:
    handler: src/Build/api.handler
    events:
      - http:
          integration: lambda-proxy
          path: /{proxy+}
          method: ANY
